name: docker-build

on:
  push:
    branches: ['develop']

env:
  DOCKER_IMAGE: ghcr.io/jeongyeonseung/release
  DOCKER_CONTAINER: release

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up Docker
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: build and push image for develop
        if: github.ref == 'refs/heads/develop'
        id: docker_build_develop
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy_develop:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ['self-hosted', 'dev']
    steps:
      - name: setup .env
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}" >> .env
          echo "LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}" >> .env
          echo "LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}" >> .env
          echo "LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}" >> .env
          echo "OPEN_API_KEY=${{ secrets.OPEN_API_KEY }}" >> .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env

          cat .env

      - name: run docker for dev server
        run: |
          sudo docker stop ${{ env.DOCKER_CONTAINER }} && sudo docker rm ${{ env.DOCKER_CONTAINER }} && sudo docker rmi ${{ env.DOCKER_IMAGE }}:latest
          sudo docker run --env-file ./.env --platform linux/amd64 -d --name ${{ env.DOCKER_CONTAINER }} --network host --restart always ${{ env.DOCKER_IMAGE }}:latest
